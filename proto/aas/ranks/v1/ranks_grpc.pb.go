// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aas/ranks/v1/ranks.proto

package ranksv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RankService_ListRanks_FullMethodName  = "/aas.ranks.v1.RankService/ListRanks"
	RankService_CreateRank_FullMethodName = "/aas.ranks.v1.RankService/CreateRank"
	RankService_GetRank_FullMethodName    = "/aas.ranks.v1.RankService/GetRank"
	RankService_UpdateRank_FullMethodName = "/aas.ranks.v1.RankService/UpdateRank"
	RankService_DeleteRank_FullMethodName = "/aas.ranks.v1.RankService/DeleteRank"
)

// RankServiceClient is the client API for RankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RankServiceClient interface {
	ListRanks(ctx context.Context, in *ListRanksRequest, opts ...grpc.CallOption) (RankService_ListRanksClient, error)
	CreateRank(ctx context.Context, in *CreateRankRequest, opts ...grpc.CallOption) (*CreateRankResponse, error)
	GetRank(ctx context.Context, in *GetRankRequest, opts ...grpc.CallOption) (*GetRankResponse, error)
	UpdateRank(ctx context.Context, in *UpdateRankRequest, opts ...grpc.CallOption) (*UpdateRankResponse, error)
	DeleteRank(ctx context.Context, in *DeleteRankRequest, opts ...grpc.CallOption) (*DeleteRankResponse, error)
}

type rankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRankServiceClient(cc grpc.ClientConnInterface) RankServiceClient {
	return &rankServiceClient{cc}
}

func (c *rankServiceClient) ListRanks(ctx context.Context, in *ListRanksRequest, opts ...grpc.CallOption) (RankService_ListRanksClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankService_ServiceDesc.Streams[0], RankService_ListRanks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rankServiceListRanksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankService_ListRanksClient interface {
	Recv() (*ListRanksResponse, error)
	grpc.ClientStream
}

type rankServiceListRanksClient struct {
	grpc.ClientStream
}

func (x *rankServiceListRanksClient) Recv() (*ListRanksResponse, error) {
	m := new(ListRanksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rankServiceClient) CreateRank(ctx context.Context, in *CreateRankRequest, opts ...grpc.CallOption) (*CreateRankResponse, error) {
	out := new(CreateRankResponse)
	err := c.cc.Invoke(ctx, RankService_CreateRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetRank(ctx context.Context, in *GetRankRequest, opts ...grpc.CallOption) (*GetRankResponse, error) {
	out := new(GetRankResponse)
	err := c.cc.Invoke(ctx, RankService_GetRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) UpdateRank(ctx context.Context, in *UpdateRankRequest, opts ...grpc.CallOption) (*UpdateRankResponse, error) {
	out := new(UpdateRankResponse)
	err := c.cc.Invoke(ctx, RankService_UpdateRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) DeleteRank(ctx context.Context, in *DeleteRankRequest, opts ...grpc.CallOption) (*DeleteRankResponse, error) {
	out := new(DeleteRankResponse)
	err := c.cc.Invoke(ctx, RankService_DeleteRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankServiceServer is the server API for RankService service.
// All implementations should embed UnimplementedRankServiceServer
// for forward compatibility
type RankServiceServer interface {
	ListRanks(*ListRanksRequest, RankService_ListRanksServer) error
	CreateRank(context.Context, *CreateRankRequest) (*CreateRankResponse, error)
	GetRank(context.Context, *GetRankRequest) (*GetRankResponse, error)
	UpdateRank(context.Context, *UpdateRankRequest) (*UpdateRankResponse, error)
	DeleteRank(context.Context, *DeleteRankRequest) (*DeleteRankResponse, error)
}

// UnimplementedRankServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRankServiceServer struct {
}

func (UnimplementedRankServiceServer) ListRanks(*ListRanksRequest, RankService_ListRanksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRanks not implemented")
}
func (UnimplementedRankServiceServer) CreateRank(context.Context, *CreateRankRequest) (*CreateRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRank not implemented")
}
func (UnimplementedRankServiceServer) GetRank(context.Context, *GetRankRequest) (*GetRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRank not implemented")
}
func (UnimplementedRankServiceServer) UpdateRank(context.Context, *UpdateRankRequest) (*UpdateRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRank not implemented")
}
func (UnimplementedRankServiceServer) DeleteRank(context.Context, *DeleteRankRequest) (*DeleteRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRank not implemented")
}

// UnsafeRankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankServiceServer will
// result in compilation errors.
type UnsafeRankServiceServer interface {
	mustEmbedUnimplementedRankServiceServer()
}

func RegisterRankServiceServer(s grpc.ServiceRegistrar, srv RankServiceServer) {
	s.RegisterService(&RankService_ServiceDesc, srv)
}

func _RankService_ListRanks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRanksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankServiceServer).ListRanks(m, &rankServiceListRanksServer{stream})
}

type RankService_ListRanksServer interface {
	Send(*ListRanksResponse) error
	grpc.ServerStream
}

type rankServiceListRanksServer struct {
	grpc.ServerStream
}

func (x *rankServiceListRanksServer) Send(m *ListRanksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RankService_CreateRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).CreateRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RankService_CreateRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).CreateRank(ctx, req.(*CreateRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RankService_GetRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetRank(ctx, req.(*GetRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_UpdateRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).UpdateRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RankService_UpdateRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).UpdateRank(ctx, req.(*UpdateRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_DeleteRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).DeleteRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RankService_DeleteRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).DeleteRank(ctx, req.(*DeleteRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RankService_ServiceDesc is the grpc.ServiceDesc for RankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aas.ranks.v1.RankService",
	HandlerType: (*RankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRank",
			Handler:    _RankService_CreateRank_Handler,
		},
		{
			MethodName: "GetRank",
			Handler:    _RankService_GetRank_Handler,
		},
		{
			MethodName: "UpdateRank",
			Handler:    _RankService_UpdateRank_Handler,
		},
		{
			MethodName: "DeleteRank",
			Handler:    _RankService_DeleteRank_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListRanks",
			Handler:       _RankService_ListRanks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aas/ranks/v1/ranks.proto",
}
