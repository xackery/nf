// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: adventures/v1/adventures.proto

package adventuresv1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Adventure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Zone            string            `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	ZoneVersion     int32             `protobuf:"varint,3,opt,name=zone_version,json=zoneVersion,proto3" json:"zone_version,omitempty"`
	IsHard          bool              `protobuf:"varint,4,opt,name=is_hard,json=isHard,proto3" json:"is_hard,omitempty"`
	IsRaid          bool              `protobuf:"varint,5,opt,name=is_raid,json=isRaid,proto3" json:"is_raid,omitempty"`
	MinLevel        int32             `protobuf:"varint,6,opt,name=min_level,json=minLevel,proto3" json:"min_level,omitempty"`
	MaxLevel        int32             `protobuf:"varint,7,opt,name=max_level,json=maxLevel,proto3" json:"max_level,omitempty"`
	Type            int32             `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	TypeData        int32             `protobuf:"varint,9,opt,name=type_data,json=typeData,proto3" json:"type_data,omitempty"`
	TypeCount       int32             `protobuf:"varint,10,opt,name=type_count,json=typeCount,proto3" json:"type_count,omitempty"`
	AssaX           float32           `protobuf:"fixed32,11,opt,name=assa_x,json=assaX,proto3" json:"assa_x,omitempty"`
	AssaY           float32           `protobuf:"fixed32,12,opt,name=assa_y,json=assaY,proto3" json:"assa_y,omitempty"`
	AssaZ           float32           `protobuf:"fixed32,13,opt,name=assa_z,json=assaZ,proto3" json:"assa_z,omitempty"`
	AssaH           float32           `protobuf:"fixed32,14,opt,name=assa_h,json=assaH,proto3" json:"assa_h,omitempty"`
	Text            string            `protobuf:"bytes,15,opt,name=text,proto3" json:"text,omitempty"`
	Duration        int32             `protobuf:"varint,16,opt,name=duration,proto3" json:"duration,omitempty"`
	ZoneInTime      int32             `protobuf:"varint,17,opt,name=zone_in_time,json=zoneInTime,proto3" json:"zone_in_time,omitempty"`
	WinPoints       int32             `protobuf:"varint,18,opt,name=win_points,json=winPoints,proto3" json:"win_points,omitempty"`
	LosePoints      int32             `protobuf:"varint,19,opt,name=lose_points,json=losePoints,proto3" json:"lose_points,omitempty"`
	Theme           int32             `protobuf:"varint,20,opt,name=theme,proto3" json:"theme,omitempty"`
	ZoneInZoneId    int32             `protobuf:"varint,21,opt,name=zone_in_zone_id,json=zoneInZoneId,proto3" json:"zone_in_zone_id,omitempty"`
	ZoneInX         int32             `protobuf:"varint,22,opt,name=zone_in_x,json=zoneInX,proto3" json:"zone_in_x,omitempty"`
	ZoneInY         int32             `protobuf:"varint,23,opt,name=zone_in_y,json=zoneInY,proto3" json:"zone_in_y,omitempty"`
	ZoneInZ         int32             `protobuf:"varint,24,opt,name=zone_in_z,json=zoneInZ,proto3" json:"zone_in_z,omitempty"`
	ZoneInObjectId  int32             `protobuf:"varint,25,opt,name=zone_in_object_id,json=zoneInObjectId,proto3" json:"zone_in_object_id,omitempty"`
	DestX           int32             `protobuf:"varint,26,opt,name=dest_x,json=destX,proto3" json:"dest_x,omitempty"`
	DestY           int32             `protobuf:"varint,27,opt,name=dest_y,json=destY,proto3" json:"dest_y,omitempty"`
	DestZ           int32             `protobuf:"varint,28,opt,name=dest_z,json=destZ,proto3" json:"dest_z,omitempty"`
	DestH           int32             `protobuf:"varint,29,opt,name=dest_h,json=destH,proto3" json:"dest_h,omitempty"`
	GraveyardZoneId int32             `protobuf:"varint,30,opt,name=graveyard_zone_id,json=graveyardZoneId,proto3" json:"graveyard_zone_id,omitempty"`
	GraveyardX      int32             `protobuf:"varint,31,opt,name=graveyard_x,json=graveyardX,proto3" json:"graveyard_x,omitempty"`
	GraveyardY      int32             `protobuf:"varint,32,opt,name=graveyard_y,json=graveyardY,proto3" json:"graveyard_y,omitempty"`
	GraveyardZ      int32             `protobuf:"varint,33,opt,name=graveyard_z,json=graveyardZ,proto3" json:"graveyard_z,omitempty"`
	GraveyardRadius int32             `protobuf:"varint,34,opt,name=graveyard_radius,json=graveyardRadius,proto3" json:"graveyard_radius,omitempty"`
	Entries         []*AdventureEntry `protobuf:"bytes,35,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *Adventure) Reset() {
	*x = Adventure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adventures_v1_adventures_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Adventure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Adventure) ProtoMessage() {}

func (x *Adventure) ProtoReflect() protoreflect.Message {
	mi := &file_adventures_v1_adventures_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Adventure.ProtoReflect.Descriptor instead.
func (*Adventure) Descriptor() ([]byte, []int) {
	return file_adventures_v1_adventures_proto_rawDescGZIP(), []int{0}
}

func (x *Adventure) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Adventure) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Adventure) GetZoneVersion() int32 {
	if x != nil {
		return x.ZoneVersion
	}
	return 0
}

func (x *Adventure) GetIsHard() bool {
	if x != nil {
		return x.IsHard
	}
	return false
}

func (x *Adventure) GetIsRaid() bool {
	if x != nil {
		return x.IsRaid
	}
	return false
}

func (x *Adventure) GetMinLevel() int32 {
	if x != nil {
		return x.MinLevel
	}
	return 0
}

func (x *Adventure) GetMaxLevel() int32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

func (x *Adventure) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Adventure) GetTypeData() int32 {
	if x != nil {
		return x.TypeData
	}
	return 0
}

func (x *Adventure) GetTypeCount() int32 {
	if x != nil {
		return x.TypeCount
	}
	return 0
}

func (x *Adventure) GetAssaX() float32 {
	if x != nil {
		return x.AssaX
	}
	return 0
}

func (x *Adventure) GetAssaY() float32 {
	if x != nil {
		return x.AssaY
	}
	return 0
}

func (x *Adventure) GetAssaZ() float32 {
	if x != nil {
		return x.AssaZ
	}
	return 0
}

func (x *Adventure) GetAssaH() float32 {
	if x != nil {
		return x.AssaH
	}
	return 0
}

func (x *Adventure) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Adventure) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Adventure) GetZoneInTime() int32 {
	if x != nil {
		return x.ZoneInTime
	}
	return 0
}

func (x *Adventure) GetWinPoints() int32 {
	if x != nil {
		return x.WinPoints
	}
	return 0
}

func (x *Adventure) GetLosePoints() int32 {
	if x != nil {
		return x.LosePoints
	}
	return 0
}

func (x *Adventure) GetTheme() int32 {
	if x != nil {
		return x.Theme
	}
	return 0
}

func (x *Adventure) GetZoneInZoneId() int32 {
	if x != nil {
		return x.ZoneInZoneId
	}
	return 0
}

func (x *Adventure) GetZoneInX() int32 {
	if x != nil {
		return x.ZoneInX
	}
	return 0
}

func (x *Adventure) GetZoneInY() int32 {
	if x != nil {
		return x.ZoneInY
	}
	return 0
}

func (x *Adventure) GetZoneInZ() int32 {
	if x != nil {
		return x.ZoneInZ
	}
	return 0
}

func (x *Adventure) GetZoneInObjectId() int32 {
	if x != nil {
		return x.ZoneInObjectId
	}
	return 0
}

func (x *Adventure) GetDestX() int32 {
	if x != nil {
		return x.DestX
	}
	return 0
}

func (x *Adventure) GetDestY() int32 {
	if x != nil {
		return x.DestY
	}
	return 0
}

func (x *Adventure) GetDestZ() int32 {
	if x != nil {
		return x.DestZ
	}
	return 0
}

func (x *Adventure) GetDestH() int32 {
	if x != nil {
		return x.DestH
	}
	return 0
}

func (x *Adventure) GetGraveyardZoneId() int32 {
	if x != nil {
		return x.GraveyardZoneId
	}
	return 0
}

func (x *Adventure) GetGraveyardX() int32 {
	if x != nil {
		return x.GraveyardX
	}
	return 0
}

func (x *Adventure) GetGraveyardY() int32 {
	if x != nil {
		return x.GraveyardY
	}
	return 0
}

func (x *Adventure) GetGraveyardZ() int32 {
	if x != nil {
		return x.GraveyardZ
	}
	return 0
}

func (x *Adventure) GetGraveyardRadius() int32 {
	if x != nil {
		return x.GraveyardRadius
	}
	return 0
}

func (x *Adventure) GetEntries() []*AdventureEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type AdventureEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TemplateId int32 `protobuf:"varint,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
}

func (x *AdventureEntry) Reset() {
	*x = AdventureEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adventures_v1_adventures_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdventureEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdventureEntry) ProtoMessage() {}

func (x *AdventureEntry) ProtoReflect() protoreflect.Message {
	mi := &file_adventures_v1_adventures_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdventureEntry.ProtoReflect.Descriptor instead.
func (*AdventureEntry) Descriptor() ([]byte, []int) {
	return file_adventures_v1_adventures_proto_rawDescGZIP(), []int{1}
}

func (x *AdventureEntry) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdventureEntry) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

type CreateAdventureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adventure *Adventure `protobuf:"bytes,1,opt,name=adventure,proto3" json:"adventure,omitempty"`
}

func (x *CreateAdventureRequest) Reset() {
	*x = CreateAdventureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adventures_v1_adventures_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdventureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdventureRequest) ProtoMessage() {}

func (x *CreateAdventureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adventures_v1_adventures_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdventureRequest.ProtoReflect.Descriptor instead.
func (*CreateAdventureRequest) Descriptor() ([]byte, []int) {
	return file_adventures_v1_adventures_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAdventureRequest) GetAdventure() *Adventure {
	if x != nil {
		return x.Adventure
	}
	return nil
}

type CreateAdventureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adventure *Adventure `protobuf:"bytes,1,opt,name=adventure,proto3" json:"adventure,omitempty"`
}

func (x *CreateAdventureResponse) Reset() {
	*x = CreateAdventureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adventures_v1_adventures_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdventureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdventureResponse) ProtoMessage() {}

func (x *CreateAdventureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adventures_v1_adventures_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdventureResponse.ProtoReflect.Descriptor instead.
func (*CreateAdventureResponse) Descriptor() ([]byte, []int) {
	return file_adventures_v1_adventures_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAdventureResponse) GetAdventure() *Adventure {
	if x != nil {
		return x.Adventure
	}
	return nil
}

type ListAdventuresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAdventuresRequest) Reset() {
	*x = ListAdventuresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adventures_v1_adventures_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdventuresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdventuresRequest) ProtoMessage() {}

func (x *ListAdventuresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adventures_v1_adventures_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdventuresRequest.ProtoReflect.Descriptor instead.
func (*ListAdventuresRequest) Descriptor() ([]byte, []int) {
	return file_adventures_v1_adventures_proto_rawDescGZIP(), []int{4}
}

type ListAdventuresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adventure *Adventure `protobuf:"bytes,1,opt,name=adventure,proto3" json:"adventure,omitempty"`
}

func (x *ListAdventuresResponse) Reset() {
	*x = ListAdventuresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adventures_v1_adventures_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdventuresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdventuresResponse) ProtoMessage() {}

func (x *ListAdventuresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adventures_v1_adventures_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdventuresResponse.ProtoReflect.Descriptor instead.
func (*ListAdventuresResponse) Descriptor() ([]byte, []int) {
	return file_adventures_v1_adventures_proto_rawDescGZIP(), []int{5}
}

func (x *ListAdventuresResponse) GetAdventure() *Adventure {
	if x != nil {
		return x.Adventure
	}
	return nil
}

type GetAdventureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAdventureRequest) Reset() {
	*x = GetAdventureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adventures_v1_adventures_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdventureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdventureRequest) ProtoMessage() {}

func (x *GetAdventureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adventures_v1_adventures_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdventureRequest.ProtoReflect.Descriptor instead.
func (*GetAdventureRequest) Descriptor() ([]byte, []int) {
	return file_adventures_v1_adventures_proto_rawDescGZIP(), []int{6}
}

func (x *GetAdventureRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetAdventureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adventure *Adventure `protobuf:"bytes,1,opt,name=adventure,proto3" json:"adventure,omitempty"`
}

func (x *GetAdventureResponse) Reset() {
	*x = GetAdventureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adventures_v1_adventures_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdventureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdventureResponse) ProtoMessage() {}

func (x *GetAdventureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adventures_v1_adventures_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdventureResponse.ProtoReflect.Descriptor instead.
func (*GetAdventureResponse) Descriptor() ([]byte, []int) {
	return file_adventures_v1_adventures_proto_rawDescGZIP(), []int{7}
}

func (x *GetAdventureResponse) GetAdventure() *Adventure {
	if x != nil {
		return x.Adventure
	}
	return nil
}

type UpdateAdventureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Adventure *Adventure `protobuf:"bytes,2,opt,name=adventure,proto3" json:"adventure,omitempty"`
}

func (x *UpdateAdventureRequest) Reset() {
	*x = UpdateAdventureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adventures_v1_adventures_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAdventureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdventureRequest) ProtoMessage() {}

func (x *UpdateAdventureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adventures_v1_adventures_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdventureRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdventureRequest) Descriptor() ([]byte, []int) {
	return file_adventures_v1_adventures_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateAdventureRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAdventureRequest) GetAdventure() *Adventure {
	if x != nil {
		return x.Adventure
	}
	return nil
}

type UpdateAdventureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adventure *Adventure `protobuf:"bytes,1,opt,name=adventure,proto3" json:"adventure,omitempty"`
}

func (x *UpdateAdventureResponse) Reset() {
	*x = UpdateAdventureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adventures_v1_adventures_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAdventureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdventureResponse) ProtoMessage() {}

func (x *UpdateAdventureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adventures_v1_adventures_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdventureResponse.ProtoReflect.Descriptor instead.
func (*UpdateAdventureResponse) Descriptor() ([]byte, []int) {
	return file_adventures_v1_adventures_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAdventureResponse) GetAdventure() *Adventure {
	if x != nil {
		return x.Adventure
	}
	return nil
}

type DeleteAdventureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAdventureRequest) Reset() {
	*x = DeleteAdventureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adventures_v1_adventures_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdventureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdventureRequest) ProtoMessage() {}

func (x *DeleteAdventureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adventures_v1_adventures_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdventureRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdventureRequest) Descriptor() ([]byte, []int) {
	return file_adventures_v1_adventures_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteAdventureRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteAdventureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adventure *Adventure `protobuf:"bytes,1,opt,name=adventure,proto3" json:"adventure,omitempty"`
}

func (x *DeleteAdventureResponse) Reset() {
	*x = DeleteAdventureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adventures_v1_adventures_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdventureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdventureResponse) ProtoMessage() {}

func (x *DeleteAdventureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adventures_v1_adventures_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdventureResponse.ProtoReflect.Descriptor instead.
func (*DeleteAdventureResponse) Descriptor() ([]byte, []int) {
	return file_adventures_v1_adventures_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteAdventureResponse) GetAdventure() *Adventure {
	if x != nil {
		return x.Adventure
	}
	return nil
}

var File_adventures_v1_adventures_proto protoreflect.FileDescriptor

var file_adventures_v1_adventures_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x08,
	0x0a, 0x09, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x7a, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x72, 0x61, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x52, 0x61, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x73, 0x73, 0x61, 0x5f, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x61, 0x73, 0x73, 0x61, 0x58, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x61, 0x5f, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x73, 0x73, 0x61, 0x59, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x73, 0x73, 0x61, 0x5f, 0x7a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x73,
	0x73, 0x61, 0x5a, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x61, 0x5f, 0x68, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x73, 0x73, 0x61, 0x48, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x77, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x7a, 0x6f, 0x6e,
	0x65, 0x49, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x7a, 0x6f,
	0x6e, 0x65, 0x49, 0x6e, 0x58, 0x12, 0x1a, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x6e,
	0x59, 0x12, 0x1a, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x7a, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x5a, 0x12, 0x29, 0x0a,
	0x11, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x74,
	0x5f, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x73, 0x74, 0x58, 0x12,
	0x15, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x64, 0x65, 0x73, 0x74, 0x59, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x7a,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x73, 0x74, 0x5a, 0x12, 0x15, 0x0a,
	0x06, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64,
	0x65, 0x73, 0x74, 0x48, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x76, 0x65, 0x79, 0x61, 0x72,
	0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x67, 0x72, 0x61, 0x76, 0x65, 0x79, 0x61, 0x72, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x76, 0x65, 0x79, 0x61, 0x72, 0x64, 0x5f, 0x78, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x76, 0x65, 0x79, 0x61, 0x72, 0x64,
	0x58, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x76, 0x65, 0x79, 0x61, 0x72, 0x64, 0x5f, 0x79,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x76, 0x65, 0x79, 0x61, 0x72,
	0x64, 0x59, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x76, 0x65, 0x79, 0x61, 0x72, 0x64, 0x5f,
	0x7a, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x76, 0x65, 0x79, 0x61,
	0x72, 0x64, 0x5a, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x76, 0x65, 0x79, 0x61, 0x72, 0x64,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67,
	0x72, 0x61, 0x76, 0x65, 0x79, 0x61, 0x72, 0x64, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x37,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x0e, 0x41, 0x64, 0x76, 0x65, 0x6e,
	0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x09, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x22, 0x51, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x64, 0x76, 0x65, 0x6e,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x64, 0x76,
	0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x6e,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x09, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x4e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x64, 0x76,
	0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76,
	0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x60, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x6e,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x61,
	0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x51, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x76,
	0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x09, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x61, 0x64, 0x76,
	0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x51, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x61,
	0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74,
	0x75, 0x72, 0x65, 0x32, 0xa9, 0x08, 0x0a, 0x10, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x64,
	0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x92, 0x41, 0x41, 0x0a, 0x0a, 0x41,
	0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x22, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x62, 0x09, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x30, 0x01, 0x12, 0xd0, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x92, 0x41, 0x43, 0x0a, 0x0a, 0x41,
	0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x20, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x21, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x62, 0x09, 0x61, 0x64, 0x76, 0x65, 0x6e,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64,
	0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x64, 0x76, 0x65,
	0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x76,
	0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x6c, 0x92, 0x41, 0x3f, 0x0a, 0x0a, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x0f, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x61, 0x64, 0x76, 0x65, 0x6e,
	0x74, 0x75, 0x72, 0x65, 0x1a, 0x20, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x61, 0x64, 0x76, 0x65,
	0x6e, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x62, 0x09, 0x61, 0x64,
	0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xd5, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x6e,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x6e,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x64,
	0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x73, 0x92, 0x41, 0x43, 0x0a, 0x0a, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x61,
	0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x20, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x3a, 0x01, 0x2a, 0x62, 0x09, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x1a,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd4, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x61,
	0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x92, 0x41, 0x45,
	0x0a, 0x0a, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,
	0x1a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x61, 0x64, 0x76, 0x65, 0x6e,
	0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x62, 0x09, 0x61, 0x64, 0x76,
	0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42,
	0xa2, 0x02, 0x92, 0x41, 0x6e, 0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x02, 0x72,
	0x62, 0x0a, 0x23, 0x67, 0x52, 0x50, 0x43, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x20,
	0x62, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x6f, 0x68, 0x61, 0x6e,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x68, 0x6f, 0x72, 0x73, 0x74, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x62, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x79, 0x2f, 0x6e, 0x66,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_adventures_v1_adventures_proto_rawDescOnce sync.Once
	file_adventures_v1_adventures_proto_rawDescData = file_adventures_v1_adventures_proto_rawDesc
)

func file_adventures_v1_adventures_proto_rawDescGZIP() []byte {
	file_adventures_v1_adventures_proto_rawDescOnce.Do(func() {
		file_adventures_v1_adventures_proto_rawDescData = protoimpl.X.CompressGZIP(file_adventures_v1_adventures_proto_rawDescData)
	})
	return file_adventures_v1_adventures_proto_rawDescData
}

var file_adventures_v1_adventures_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_adventures_v1_adventures_proto_goTypes = []interface{}{
	(*Adventure)(nil),               // 0: adventures.v1.Adventure
	(*AdventureEntry)(nil),          // 1: adventures.v1.AdventureEntry
	(*CreateAdventureRequest)(nil),  // 2: adventures.v1.CreateAdventureRequest
	(*CreateAdventureResponse)(nil), // 3: adventures.v1.CreateAdventureResponse
	(*ListAdventuresRequest)(nil),   // 4: adventures.v1.ListAdventuresRequest
	(*ListAdventuresResponse)(nil),  // 5: adventures.v1.ListAdventuresResponse
	(*GetAdventureRequest)(nil),     // 6: adventures.v1.GetAdventureRequest
	(*GetAdventureResponse)(nil),    // 7: adventures.v1.GetAdventureResponse
	(*UpdateAdventureRequest)(nil),  // 8: adventures.v1.UpdateAdventureRequest
	(*UpdateAdventureResponse)(nil), // 9: adventures.v1.UpdateAdventureResponse
	(*DeleteAdventureRequest)(nil),  // 10: adventures.v1.DeleteAdventureRequest
	(*DeleteAdventureResponse)(nil), // 11: adventures.v1.DeleteAdventureResponse
}
var file_adventures_v1_adventures_proto_depIdxs = []int32{
	1,  // 0: adventures.v1.Adventure.entries:type_name -> adventures.v1.AdventureEntry
	0,  // 1: adventures.v1.CreateAdventureRequest.adventure:type_name -> adventures.v1.Adventure
	0,  // 2: adventures.v1.CreateAdventureResponse.adventure:type_name -> adventures.v1.Adventure
	0,  // 3: adventures.v1.ListAdventuresResponse.adventure:type_name -> adventures.v1.Adventure
	0,  // 4: adventures.v1.GetAdventureResponse.adventure:type_name -> adventures.v1.Adventure
	0,  // 5: adventures.v1.UpdateAdventureRequest.adventure:type_name -> adventures.v1.Adventure
	0,  // 6: adventures.v1.UpdateAdventureResponse.adventure:type_name -> adventures.v1.Adventure
	0,  // 7: adventures.v1.DeleteAdventureResponse.adventure:type_name -> adventures.v1.Adventure
	4,  // 8: adventures.v1.AdventureService.ListAdventures:input_type -> adventures.v1.ListAdventuresRequest
	2,  // 9: adventures.v1.AdventureService.CreateAdventure:input_type -> adventures.v1.CreateAdventureRequest
	6,  // 10: adventures.v1.AdventureService.GetAdventure:input_type -> adventures.v1.GetAdventureRequest
	8,  // 11: adventures.v1.AdventureService.UpdateAdventure:input_type -> adventures.v1.UpdateAdventureRequest
	10, // 12: adventures.v1.AdventureService.DeleteAdventure:input_type -> adventures.v1.DeleteAdventureRequest
	5,  // 13: adventures.v1.AdventureService.ListAdventures:output_type -> adventures.v1.ListAdventuresResponse
	3,  // 14: adventures.v1.AdventureService.CreateAdventure:output_type -> adventures.v1.CreateAdventureResponse
	7,  // 15: adventures.v1.AdventureService.GetAdventure:output_type -> adventures.v1.GetAdventureResponse
	9,  // 16: adventures.v1.AdventureService.UpdateAdventure:output_type -> adventures.v1.UpdateAdventureResponse
	11, // 17: adventures.v1.AdventureService.DeleteAdventure:output_type -> adventures.v1.DeleteAdventureResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_adventures_v1_adventures_proto_init() }
func file_adventures_v1_adventures_proto_init() {
	if File_adventures_v1_adventures_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_adventures_v1_adventures_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Adventure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adventures_v1_adventures_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdventureEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adventures_v1_adventures_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdventureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adventures_v1_adventures_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdventureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adventures_v1_adventures_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdventuresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adventures_v1_adventures_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdventuresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adventures_v1_adventures_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdventureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adventures_v1_adventures_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdventureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adventures_v1_adventures_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAdventureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adventures_v1_adventures_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAdventureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adventures_v1_adventures_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdventureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adventures_v1_adventures_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdventureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_adventures_v1_adventures_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_adventures_v1_adventures_proto_goTypes,
		DependencyIndexes: file_adventures_v1_adventures_proto_depIdxs,
		MessageInfos:      file_adventures_v1_adventures_proto_msgTypes,
	}.Build()
	File_adventures_v1_adventures_proto = out.File
	file_adventures_v1_adventures_proto_rawDesc = nil
	file_adventures_v1_adventures_proto_goTypes = nil
	file_adventures_v1_adventures_proto_depIdxs = nil
}
